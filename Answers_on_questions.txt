

**1) Что подразумевается под тестовой средой?**
Тестовая среда -это отдельное окружение, где можно спокойно проверять доработанный или новосозданный функционал, и не боятся что ошибки попадут к конечному пользователю. Тестовая среда зачастую считается банальной копией рабочего окружения, которая не видна конечному пользователю, но максимально похожа на конечную версию продукта. 


**2) В чем отличие build от release?**
Билд — это в буквальном переводе — "сборка". Т.е. берём срез исходников, создаём исполняемые файлы, конфиги, скрипты SQL и т.п. Т.е. билд — полученные из исходников рабочие продукты. Создаётся как вручную по требованию, так и автоматическими системами сборок по расписанию. Как угодно, в общем — было бы что собирать.
Релиз — это билд, который команда разработчиков предоставляет наружу. В качестве потребителя релиза может быть как команда тестеров, так и пользователи. Соответствнно, внутренний релиз — это тестовый релиз, который должна тестировать группа тестирования, внешний релиз — это релиз, который поставляются заказчику.


**3)Основные фазы тестирования?**
Необходимость проведения тестирования в несколько этапов определяется тем, что разные типы ошибок проще всего обнаруживаются на разных этапах. Основными фазами тестирования являются:

– модульное тестирование;
– интеграционное тестирование;
– системное тестирование (в том числе адаптационное, функциональное и нагрузочное);
– регрессионное тестирование;
– приемочное тестирование.
На стадии модульного тестирования достаточно просто выявляются просчеты в логике построения модуля и/или реализации алгоритмов, ошибки, связанные с неправильным использованием локальных ресурсов, а также ошибки в локальных переменных.

Следующим этапом явлется интеграционное тестирование. Оно проходит в несколько стадий и заключается в тестировании частей системы, состоящих из двух и большего количества модулей. На стадии интеграционного тестирования ошибки управления потоком, ошибки в передаче и/или интерпредтации данных, использовании ресурсов, средств коммуникации.

Третьим этапом является системное тестирование, которое существенным образом отличается от модульного и интеграционного. Оно рассматривает систему как черный ящик и работает исключительно с пользовательскими интерфейсами. Основной целью системного тестирования является проверка стабильности и корректности работы системы, а также соответствия функциональностей системы спецификациям, указанным в сопроводительных документах, проверяется работы системы на базе различных операционных систем и аппаратного обеспечения. Исследуется производительность тестируемого программного обеспечения.

Основной целью регрессионного тестирования является проверка того, что в результате внесения изменений в программный код зафиксированные ранее ошибки исправлены, а новые не появляются. Для регрессионного тестирования используется специально разработанный набор тестов, из которого каждый раз выбираются те тесты, которые позволяют обнаружить появление новых ошибок с наибольшей вероятностью.

Приемочное тестирование — тестирование интегральной функциональности системы на соответствие требованиям заказчика. Планируется с участием представителей заказчика. Проводится на заключительном этапе с целью удостовериться в том, что система работает так, как и ожидалось, все необходимые формы, процедуры присутствуют и функционируют нормально. Данное тестирование является высокоуровневой проверкой отсутствия пробелов в функциональности системы.

Положительные результаты бизнес-тестирования означают, что все компоненты системы работоспособны и включены в данную версию продукта.




**4)Что такое импакт анализ?**
Impact Analysis (импакт анализ) - это исследование, которое позволяет указать затронутые места (affected areas) в проекте при разработке новой или изменении старой функциональности, а также определить, насколько значительно они были затронуты. Затронутые области требуют большего внимания во время проведения регрессионного тестирования. Импакт анализ может быть полезным в следующих случаях:
 -есть изменения в требованиях;
 -получен запрос на внесение изменений в продукт;
 -ожидается внедрение нового модуля или функциональности в существующий продукт;
 -каждый раз, когда есть изменения в существующих модулях или функциональностях продукта.



**5)Критерии выбора тестов?**
Требования к идеальному критерию тестирования:
    - Критерий должен быть достаточным, т.е. показывать, когда некоторое конечное множество тестов достаточно для тестирования данной программы.
    - Критерий должен быть полным, т.е. в случае ошибки должен существовать тест из множества тестов, удовлетворяющих критерию, который раскрывает ошибку.
    - Критерий должен быть надежным, т.е. любые два множества тестов, удовлетворяющих ему, одновременно должны раскрывать или не раскрывать ошибки программы.
    - Критерий должен быть легко проверяемым, например вычисляемым на тестах.
Для нетривиальных классов программ в общем случае не существует полного и надежного критерия, зависящего от программ или спецификаций. Поэтому мы стремимся к идеальному общему критерию через реальные частные. Классы критериев:
    - Структурные критерии используют информацию о структуре программы (критерии так называемого "белого ящика").
    - Функциональные критерии формулируются в описании требований к программному изделию ( критерии так называемого "черного ящика" ).
    - Критерии стохастического тестирования формулируются в терминах проверки наличия заданных свойств у тестируемого приложения, средствами проверки некоторой статистической гипотезы.
    - Мутационные критерии ориентированы на проверку свойств программного изделия на основе подхода Монте-Карло.
Структурные критерии используют модель программы в виде "белого ящика", что предполагает знание исходного текста программы или спецификации программы в виде потокового графа управления. Структурная информация понятна и доступна разработчикам подсистем и модулей приложения, поэтому данный класс критериев часто используется на этапах модульного и интеграционного тестирования (Unit testing, Integration testing). Структурные критерии базируются на основных элементах УГП (Управляющий граф программы), операторах, ветвях и путях.
    - Условие критерия тестирования команд (критерий С0) - набор тестов в совокупности должен обеспечить прохождение каждой команды не менее одного раза. Это слабый критерий, он, как правило, используется в больших программных системах, где другие критерии применить невозможно.
    - Условие критерия тестирования ветвей (критерий С1) - набор тестов в совокупности должен обеспечить прохождение каждой ветви не менее одного раза. Это достаточно сильный и при этом экономичный критерий, поскольку множество ветвей в тестируемом приложении конечно и не так уж велико. Данный критерий часто используется в системах автоматизации тестирования.
    - Условие критерия тестирования путей (критерий С2) - набор тестов в совокупности должен обеспечить прохождение каждого пути не менее 1 раза. Если программа содержит цикл (в особенности с неявно заданным числом итераций), то число итераций ограничивается константой (часто - 2, или числом классов выходных путей).
Структурные критерии не проверяют соответствие спецификации, если оно не отражено в структуре программы. Поэтому при успешном тестировании программы по критерию C2 мы можем не заметить ошибку, связанную с невыполнением некоторых условий спецификации требований. Функциональный критерий - важнейший для программной индустрии критерий тестирования. Он обеспечивает, прежде всего, контроль степени выполнения требований заказчика в программном продукте. Поскольку требования формулируются к продукту в целом, они отражают взаимодействие тестируемого приложения с окружением. При функциональном тестировании преимущественно используется модель "черного ящика". Проблема функционального тестирования - это, прежде всего, трудоемкость; дело в том, что документы, фиксирующие требования к программному изделию (Software requirement specification, Functional specification и т.п.), как правило, достаточно объемны, тем не менее, соответствующая проверка должна быть всеобъемлющей. Ниже приведены частные виды функциональных критериев:
    - Тестирование пунктов спецификации - набор тестов в совокупности должен обеспечить проверку каждого тестируемого пункта не менее одного раза. Спецификация требований может содержать сотни и тысячи пунктов требований к программному продукту и каждое из этих требований при тестировании должно быть проверено в соответствии с критерием не менее чем одним тестом.
    - Тестирование классов входных данных - набор тестов в совокупности должен обеспечить проверку представителя каждого класса входных данных не менее одного раза. При создании тестов классы входных данных сопоставляются с режимами использования тестируемого компонента или подсистемы приложения, что заметно сокращает варианты перебора, учитываемые при разработке тестовых наборов. Следует заметить, что перебирая в соответствии с критерием величины входных переменных (например, различные файлы - источники входных данных), мы вынуждены применять мощные тестовые наборы. Действительно, наряду с ограничениями на величины входных данных, существуют ограничения на величины входных данных во всевозможных комбинациях, в том числе проверка реакций системы на появление ошибок в значениях или структурах входных данных. Учет этого многообразия - процесс трудоемкий, что создает сложности для применения критерия.
    - Тестирование правил - набор тестов в совокупности должен обеспечить проверку каждого правила, если входные и выходные значения описываются набором правил некоторой грамматики. Следует заметить, что грамматика должна быть достаточно простой, чтобы трудоемкость разработки соответствующего набора тестов была реальной (вписывалась в сроки и штат специалистов, выделенных для реализации фазы тестирования).
    - Тестирование классов выходных данных - набор тестов в совокупности должен обеспечить проверку представителя каждого выходного класса, при условии, что выходные результаты заранее расклассифицированы, причем отдельные классы результатов учитывают, в том числе, ограничения на ресурсы или на время (time out). При создании тестов классы выходных данных сопоставляются с режимами использования тестируемого компонента или подсистемы, что заметно сокращает варианты перебора, учитываемые при разработке тестовых наборов.
    - Тестирование функций - набор тестов в совокупности должен обеспечить проверку каждого действия, реализуемого тестируемым модулем, не менее одного раза. Очень популярный на практике критерий, который, однако, не обеспечивает покрытия части функциональности тестируемого компонента, связанной со структурными и поведенческими свойствами, описание которых не сосредоточено в отдельных функциях (т.е. описание рассредоточено по компоненту). Критерий тестирования функций объединяет отчасти особенности структурных и функциональных критериев. Он базируется на модели "полупрозрачного ящика", где явно указаны не только входы и выходы тестируемого компонента, но также состав и структура используемых методов (функций, процедур) и классов.
    - Комбинированные критерии для программ и спецификаций - набор тестов в совокупности должен обеспечить проверку всех комбинаций непротиворечивых условий программ и спецификаций не менее одного раза. При этом все комбинации непротиворечивых условий надо подтвердить, а условия противоречий следует обнаружить и ликвидировать.
Стохастическое тестирование применяется при тестировании сложных программных комплексов - когда набор детерминированных тестов (X,Y) имеет громадную мощность. Мутационный критерий (класс IV). Постулируется, что профессиональные программисты пишут сразу почти правильные программы, отличающиеся от правильных мелкими ошибками или описками типа - перестановка местами максимальных значений индексов в описании массивов, ошибки в знаках арифметических операций, занижение или завышение границы цикла на 1 и т.п. Предлагается подход, позволяющий на основе мелких ошибок оценить общее число ошибок, оставшихся в программе. Подход базируется на следующих понятиях: Мутации - мелкие ошибки в программе. Мутанты - программы, отличающиеся друг от друга мутациями . Метод мутационного тестирования - в разрабатываемую программу P вносят мутации, т.е. искусственно создают программы-мутанты P1, P2... Затем программа P и ее мутанты тестируются на одном и том же наборе тестов (X,Y). Если на наборе (X,Y) подтверждается правильность программы P и, кроме того, выявляются все внесенные в программы-мутанты ошибки, то набор тестов (X,Y) соответствует мутационному критерию, а тестируемая программа объявляется правильной. Если некоторые мутанты не выявили всех мутаций, то надо расширять набор тестов (X,Y) и продолжать тестирование.

    

**6)Принципы тестирования?**
1. Тестирование показывает наличие дефектов
Тестирование может показать наличие дефектов в программе, но не доказать их отсутствие. Тем не менее, важно составлять тест-кейсы, которые будут находить как можно больше багов. Таким образом, при должном тестовом покрытии, тестирование позволяет снизить вероятность наличия дефектов в программном обеспечении. В то же время, даже если дефекты не были найдены в процессе тестирования, нельзя утверждать, что их нет.
2. Исчерпывающее тестирование невозможно
Невозможно провести исчерпывающее тестирование, которое бы покрывало все комбинации пользовательского ввода и состояний системы, за исключениям совсем уж примитивных случаев. Вместо этого необходимо использовать анализ рисков и расстановку приоритетов, что позволит более эффективно распределять усилия по обеспечению качества ПО.
3. Раннее тестирование
Тестирование должно начинаться как можно раньше в жизненном цикле разработки программного обеспечения, и его усилия  должны быть сконцентрированы на определенных целях.
4. Скопление дефектов
Разные модули системы могут содержать разное количество дефектов – то есть, плотность скопления дефектов в разных элементах программы может отличаться. Усилия по тестированию должны распределяться пропорционально фактической плотности дефектов. В основном, большую часть критических дефектов находят в ограниченном количестве модулей. Это проявление принципа Парето: 80% проблем содержатся в 20% модулей.
5. Парадокс пестицида
Прогоняя одни и те же тесты вновь и вновь, Вы столкнетесь с тем, что они находят все меньше новых ошибок. Поскольку система эволюционирует, многие из ранее найденных дефектов исправляют и старые тест-кейсы больше не срабатывают.
Чтобы преодолеть этот парадокс, необходимо периодически вносить изменения в используемые наборы тестов, рецензировать и корректировать их с тем, чтобы они отвечали новому состоянию системы и позволяли находить как можно большее количество дефектов.
6. Тестирование зависит от контекста
Выбор методологии, техники и типа тестирования будет напрямую зависеть от природы самой программы. Например, программное обеспечение для медицинских нужд требует гораздо более строгой и тщательной проверки, чем, скажем, компьютерная игра. Из тех же соображений, сайт с большой посещаемостью должен пройти через серьезное тестирование производительности, чтобы показать возможность работы в условиях высокой нагрузки.
7. Заблуждение об отсутствии ошибок.
Тот факт, что тестирование не обнаружило дефектов, еще не значит, что программа готова к релизу. Нахождение и исправление дефектов будут не важны, если система окажется неудобной в использовании, и не будет удовлетворять ожиданиям и потребностям пользователя.
8.Верификация/Валидация


**7)Что такое независимое тестирование?**
Можете ли вы доверять вердикту судьи, который является частью внутреннего круга людей, которых он должен судить? Чтобы этот процесс был справедливым, лица, принимающие решения, должны быть беспристрастными. Теперь, когда вы активно участвуете в разработке какого-либо продукта или программного обеспечения, тестировать его с нейтральным мышлением это легче сказать, чем сделать. Как разработчик, вы бы хотели отгружать продукт в кратчайшие сроки и считать его безупречным и в конечном итоге упустите из виду некоторые ошибки. Чтобы избежать такой ситуации, иногда следует нанять независимую организацию по тестированию, которая тщательно проверит ваш продукт на наличие сбоев, готовя его к развертыванию.  Тестирование по уровням независимости:
    - Программист тестирует свой код 
    - Тестирование проводится другим программистом в организации
    - Внутренняя команда тестирования 
    - Независимая организация тестирования
    - Когда программист проверяет свой код: Вы бы никогда не попросили шеф-повара быть его собственным критиком. И даже если вы это сделаете, вам будет трудно поверить всему, что он говорит. Смысл - создатель никогда не может быть хорошим критиком своей собственной работы. Программист знает свой код от и до. Их цель - создать продукт и отправить его в кратчайшие сроки. Вместо того, чтобы искать ошибки со всех возможных точек зрения, они будут искушены найти способы обойти найденные ошибки. Писатель Гленфорд Майерс в своей книге «Искусство тестирования программного обеспечения» перечислил разницу в мышлении разработчика и тестировщика. Он сказал, что разработчик думает как строитель, сосредоточенный на строительстве, в то время как тестировщик ищет недостатки, которые приведут к разрушению здания, если не будут решены. 
    - Тестирование проводится другим программистом в организации: Компромисс - это найти кого-то в организации. Это может быть какой-то другой программист, который участвует в некоторых других проектах. Это дает определенный уровень независимости. Но проблема возникает из-за того же reporting manager. Менеджер может попросить программиста пропустить некоторые тесты, когда есть ограничения по времени. Это приведет к неполному тестированию продукта. Кроме того, если попросить других разработчиков провести тестирование, это приведет к развертыванию различных ресурсов в одном проекте. Это будет вредно для всей работы организации. 
    - Внутренняя команда тестирования: Наличие другой внутренней команды - это хорошее решение. Но поскольку они будут в организации, на них будут влиять ограничительные сроки. Кроме того, это будет дорого поддерживать внутреннюю команду. Это приведет к большим бюджетным и ресурсным ограничениям для команды. Команда может иметь доступ к ограниченным инструментам и программному обеспечению, таким образом, не отвечая требованиям всех проектов. Среда тестирования также будет варьироваться в зависимости от количества пользователей и числа выполненных интеграций. Затем тестирование будет проводиться в спешном порядке, что приведет к упущению некоторых ошибок, которые могут появиться после выпуска продукта. Решение, которое позаботится обо всех этих недостатках, - «Независимое тестирование». 
    - Почему независимое тестирование? Независимые тестирующие организации изучат все аспекты вашей продукции. Они работают с мышлением поиска недостатков и ошибок. Они не будут использовать ярлыки в процессе тестирования. И поскольку они не были частью процесса разработки, они будут проводить тесты на нейтральной основе, чтобы прежние интересы не мешали процессу тестирования. Мысль о поиске максимальных «точек останова» пойдет на пользу вашему продукту. Почти все сторонние тестирующие организации предоставят вам подробные отчеты об ошибках и предложат корректирующие меры. 



**8)Что такое тестирование со сдвигом влево?**
В попытке перенести тестирование на более ранний этап жизненного цикла разработки при одновременном улучшении показателей качества, задачи смещаются влево в схеме жизненного цикла разработки ПО. По возможности, тестирование должно проводиться с самого начала фазы проектирования, чтобы построить соответствующую стратегию тестирования. Проще говоря, это подход к тестированию программного обеспечения и тестированию системы, при котором тестирование выполняется на более раннем этапе жизненного цикла. Ключевые преимущества:
 -Сокращение затрат 
 -Более высокое качество
 -Повышение эффективности 
 -Конкурентные преимущества

  

**9)Почему тестирование делится на отдельные этапы?**
-Каждый этап испытаний имеет свое назначение 
-Проще управлять поэтапно 
-Мы можем запустить разные тесты в разных средах 
-Производительность и качество тестирования улучшаются с помощью поэтапного тестирования



**10)Какие есть этапы тестирования?**
Тестирование – неотъемлемая часть жизненного цикла продукта, однако необходимо понимать, с чего стоит начинать тестирование, и когда оно заканчивается. Например, неопытные специалисты ошибочно думают, что после релиза они могут переключаться на другой проект.

 Всего принято выделять 7 этапов тестирования:
Работа с требованиями. Знакомство с требованиями заказчика, что должен из себя представлять итоговый продукт, обсуждение.
Разработка стратегии тестирования. Оценка сроков тестирования, выявление среды тестирования, объединение всей информации, полученной при работе с требованиями.
Создание тестовой документации. Написание сценариев, которые позволят проверить функционал.
Тестирование прототипа. Тестирование основного функционала продукта, корректировка целей, добавление фичей.
Основное тестирование. Выполнение общей проверки продукта.
Стабилизация. На данном этапе происходит работа над устранением багов.
Эксплуатация. Проводится регресс-тестирование, устранение ошибок, которые нашел конечный пользователь.
Прежде, чем переходить к описанию каждого цикла тестирования, необходимо запомнить важное правило: переход к следующему этапу допустим лишь после полного завершения работы на предыдущем. Теперь поговорим о каждом этапе тестирования отдельно.
Этап 1. Работа с требованиями
Команда тестирования знакомится с требованиями заказчика, функционалом продукта. На данном этапе важно непрерывное общение команд, необходимо задавать вопросы разработчикам.
Тщательное изучение требований должно:
выявить противоречия в требованиях;
помочь определить потенциальные дефекты в функционале.
 Общение является ключевым аспектом в разработке продукта, а продуманный roadmap (дорожная карта, стратегический план по реализации функционала продукта по определенным датам) позволит устранить нелогичность будущих внесенных изменений в продукт.
Этап 2. Разработка стратегии тестирования и планирование процедур контроля качества
Данный этап важен для лидов или менеджеров, поскольку от понимания полученной на предыдущем этапе информации зависит качество тестирования. 
Тест — лид должен: 
резюмировать полученную информацию, 
оценить сроки тестирования, 
разработать стратегию тестирования: определить виды тестирования, которые можно применить к проекту, проанализировать имеющиеся среды и ресурсы, что имеется для проведения тестирования, описать приоритеты для непредвиденных ситуаций, как и где будет вестись тестовая документация; 
определение среды тестирования: какое оборудование необходимо для тестирования,
составить план, который содержит описание, с чего начинается и чем заканчивается тестирование, и что будет тестироваться.
Этап 3. Создание тестовой документации
Цель данного этапа – создать документацию, объем которой будет охватывать детализацию, ход работ, а также вносить ясность для заказчика.
Общение с другими командами, понимание желаний заказчика напрямую влияют на качество тестовой документации. После проведенного тестирования можно проанализировать его успешность.
Тестовая документация может состоять из:
тестовых сценариев: что и как будет проверяться при регресс-, дымовом и приемочном тестированиях;
отчетности: результаты тестирования, списка багов и их серьезность;
методологий тестирования.
Детализация тестовой документации зависит от проекта, поэтому она может отличаться и по охвату, и по формату, и по объему. Для тестировщика важно поддерживать документацию в актуальном виде, вносить любые изменения, связанные с изменением итогового продукта.
Этап 4.  Тестирование прототипа
При создании и тестировании прототипа продукта необходимо выявить основные отклонения от ожидаемого результата и соответствие с бизнес-стратегией. Здесь же выявляются ошибки в работе логики основного функционала, устраняются найденные уязвимости и дефекты, допущенные на этапе разработки. Заказчик может сам участвовать в процессе тестирования прототипа, чтобы он мог оценить, на каком этапе находится разработка продукта. После тестирования выдвигаются пожелания со стороны заказчика. Новые пожелания необходимо задокументировать, оценить сроки, внедрить в проект и передать на осмотр заказчику.
Самый подходящий метод тестирования прототипа – проведение закрытого бета-тестирования, когда продукт тестирует продукт малое количество людей, которые в итоге будут использовать его после релиза. Это помогает учесть пожелания конечных пользователей.
Очень важно лиду или менеджеру проекта передавать информацию тестировщикам и разработчикам о пожеланиях заказчика, на какие частые сбои в продукте натыкались пользователи для того, чтобы сделать его более понятным.
Этап 5. Основное тестирование
Тестирование программного обеспечения является самым длительным и объемным процессом. Здесь формируются репорты о найденных дефектах, выполняется набор тестовых сценариев, создается тестовая среда, выполняется тестирование, виды которого были задокументированы на этапе создания тестовой документации. Смоук- и регресс-тестирования являются одними из основных видов тестирования, которые проводятся на данном этапе.
Важно понимать: невозможно найти все ошибки в продукте. Но и не найти ошибки при тестировании можно считать провалом. Главная цель — не сделать идеальный продукт без ошибок, а найти максимальное количество дефектов, которые потенциально могут сломать систему.
Этап 6. Стабилизация
Наверное, самый непонятный с точки зрения формулировки этап. На нем заканчивается работа с пожеланиями заказчика и фиксируются найденные баги. Он является связующим звеном между командой тестирования и командой разработчиков. На протяжении создания онлайн-ресурса команда разработчиков занималась своими делами, реализуя «хотелки» заказчика, а тестировщики репортили о новых дефектах. А на этапе стабилизации разработчики начинают слушать тестировщиков, устраняя то, что уже работает, но некорректно.
Если продукт существует в какой-то большой системе, то на данном этапе также проверяется коммуникация системы и продукта, то есть проводится интеграционное тестирование.
Этап 7. Эксплуатация и поддержка
Пожалуй, самый волнительный период. После устранения дефектов команда разработчиков переходит в этап тестирования продукта в продакшн-среде. Так как многие ставят точку на проекте после релиза, очень важно подметить, что здесь происходит не только релиз продукта, но и пост-релизовая поддержка. 
При всем желании нельзя учесть все нюансы использования, воссоздать ту среду, в которой будет использован продукт. Поэтому на данном этапе необходимо сделать акцент на том, что говорят пользователи, важно прислушиваться к их мнению, поскольку они участвуют не только в использовании продукта, но и тестировании, натыкаясь на ненайденные ошибки. Ваш продукт становится частью жизнедеятельности людей, поэтому устранение дефектов и их поиск проводятся быстро, но тщательно. Не всегда конечный пользователь может предоставить информацию о том, что он сделал для получения ошибки, поэтому за повторение дефекта берется QA-команда.
Изучив все этапы тестирования сложно выделить главный – каждый из них важен по-своему. Тестирование является долгим и кропотливым процессом, результатом которого является выявленная ошибка в системе. Тестировщик должен четко формулировать свою позицию, почему найденная ошибки — действительно дефект, должен прислушиваться после релиза к позиции конечного пользователя и помнить, что ничто в этом мире не идеально.



**11) Как вы тестируете продукт, если требования еще не зафиксированы**
Если спецификация требований недоступна для продукта, тогда план тестирования может быть создан на основе предположений, сделанных относительно продукта. Но мы должны хорошо документировать все предположения в плане тестирования. 

 

**12)Как вы узнаете, было ли создано достаточно тестов для тестирования продукта?**
Прежде всего, мы проверим, охватывает ли каждое требование хотя бы один Test case. Если да, то можно сказать, что тестовых примеров достаточно для тестирования продукта. 


**13)Что подразумевается под тестовыми данными? **
Тестовые данные - это набор входных значений, необходимых для выполнения Test case. тестировщики определяют данные в соответствии с требованиями. Они могут сделать это вручную или использовать инструменты генерации.



**14)Что такое бета-тестирование?**
Интенсивное использование почти готовой версиипродукта, с целью выявления максимального числа ошибок в его работе, для их последующего устранения перед окончательным выходом (релизом)продукта на рынок к массовому потребителюю(тестируют заказчики -ключевые пользователи)



**15)Что означает пилотное тестирование? (Pilot)**
PILOT testing определяется как тип тестирования программного обеспечения, который проверяет компонент системы или всю систему в режиме реального времени. Целью пилотного теста является оценка осуществимости, времени, стоимости, риска и эффективности исследовательского проекта. Это тестирование проводится точно между UAT и Production. В пилотном тестировании выбранная группа конечных пользователей пробует тестируемую систему и предоставляет обратную связь до полного развертывания системы. Другими словами, это означает проведение генеральной репетиции для последующего теста на удобство использования. Пилотное тестирование помогает в раннем обнаружении ошибок в Системе. Пилотное тестирование связано с установкой системы на площадке заказчика (или в среде, моделируемой пользователем) для тестирования на предмет постоянного и регулярного использования. Выявленные недостатки затем отправляются команде разработчиков в виде отчетов об ошибках, и эти ошибки исправляются в следующей сборке системы. Во время этого процесса иногда приемочное тестирование также включается как часть тестирования на совместимость. Это происходит, когда система разрабатывается для замены старой.


**17.Что такое бизнес – логика?**
Бизнес – логика (domain) это то, что конкретная программа по задумке должна сделать. Например, в складской программе проверка на возможность отправить товар (вдруг его нет в наличии). Это правила, которые должны соблюдаться в данной конкретной программе, определенные бизнес-клиентом. Слои приложения – слой пользовательского интерфейса, слой бизнес логики, слой сохранения данных.


**18)Какие существуют основные виды тестирования ПО?**
----Функциональное тестирование: 
+По исполнению кода: Статическое, Динамическое тестированием
+По знанию системы: Черный, белый, серый ящик
+По уровням: Компонентное/Модульное (Unit testing), Интеграционное (Integration testing), Системное (System testing), Приемочное тестирование(Acceptence testing)
+По принципу позитивности сценариев: Позитивное тестирование, Негативное тестирование.
+По времени и месту проведения:Альфа и Бета тестирование
+По подготовленности специалиста: Интуитивное тестирование и Иследовательское тестирование
+По цели тестирования: Дымовое тестирование (Smoke testing), Ре-тест функционала (Re-test),Санитарное тестирование (Sanity testing), Тестирование нового функционала (New Fuater testung) , Регрессионное тестирование (Regression Testing), Приемочное тестирование(User Acceptance Testing)
+По разработке тестовых сценариев: На основе тестовых сценариев, По вариантам использования, На основе модели
+По степени автоматизации: Ручное, Автоматизированное, Смешанное/Полуавтоматизирование
+По уровню представления системы: Front-End, Back-End
----Нефункциональное тестирование:
+Тестирование безопасности
+Тестирование эффективности(Efficiency):
=Масштабируемость(Scalability):Vertical scalability,Horizontal scalability
=Производительность (Performance):Load testing, Stress testing,Volume testing
=Использование ресурсов (Resource utilization):CPU, Memory,Disk, Network.
+Тестирование надёжности(Reliability)
=Прочность(Robustness):Fuzz testing
=Востанавливаемость(Recoverability): Backup/Restore
=Отказоустойчивость(Fault-tolerance): Rollback,Roll-forward,Compensation
+Тестирование удобства использования:Производительность, эффективность (Efficiency), Правильность(Accuracy),Активизация в памяти (Recall),Эмоциальная реакция(Emotional response)
+Тестирование портативности: Адаптивность(Adaptability), Совместимость(Co-existence),Локализация(Localization),Заменимость(Replaceability)
+Тестирование ремонтнопригодности (maintainability):Исправление проблем (Corrective maintenance),Усовершенствования (Perfective maintenance), Профилактическое обслуживание (Preventive maintenance)


**19)Методы тестирования?**
метод "Чёрного ящика" (Black box testing) - когда нет доступа к коду
метод "Белого ящика" (White box or «glass-box» testing) - когда есть доступ к коду
метод "Серого ящика" (Grey box) - когла есть частичный доступ к коду (консоль браузера)

 
  

**20)Что такое пирамида / уровни тестирования?**
Тестовая пирамида - визуализация, описывающая различные уровни тестирования и объем тестирования на каждом слое тестирования.
+Модульные тесты должны составлять основную часть автоматизированного тестирования.
- Задачи автоматизации не закрываются до тех пор, пока эти скрипты не будут запущены на реализованной функциональности;
- Разработка одновременно с модульными тестами заставляет разработчиков задуматься о проблеме, которую они решают, и о любых крайних случаях, с которыми они могут столкнуться;
- Тесты являются детальными и могут помочь точно определить дефект;
- Время выполнения невероятно быстрое, потому что им не нужно полагаться на какой-либо пользовательский интерфейс или внешние системы, такие как база данных или API;
- Они недорогие, просто пишутся, легко поддерживать.
+Интеграционные тесты должны занимать середину пирамиды.
Используйте этот уровень для проверки бизнес-логики без использования пользовательского интерфейса (UI);
Тестируя за пределами пользовательского интерфейса, вы можете тестировать входы и выходы API или сервисов без всех сложностей, которые вводит пользовательский интерфейс;
Эти тесты медленнее и сложнее, чем модульные тесты, потому что им может потребоваться доступ к базе данных или другим компонентам.
+Тесты пользовательского интерфейса должны размещаться на вершине пирамиды.
Большая часть вашего кода и бизнес-логики должна быть уже протестирована до этого уровня;
Тесты интерфейса пишутся, чтобы убедиться, что сам интерфейс работает правильно;
Тесты пользовательского интерфейса медленнее и тяжелее в написании и поддержке, поэтому необходимо сводить их к минимуму.




**21.Что такое деструктивное/разрушающее/негативное тестирование? (DT — Destructive testing)**
ОТРИЦАТЕЛЬНОЕ ТЕСТИРОВАНИЕ - тип тестирования ПО для поиска точек отказа в программном обеспечении, который проверяет систему на обработку исключительных ситуаций (срабатывание валидаторов на некорректные данные), а также проверяет, что вызываемая приложением функция не выполняется при срабатывании валидатора. Неожиданные условия могут быть чем угодно, от неправильного типа данных до хакерской атаки. Целью отрицательного тестирования является предотвращение сбоя приложений из-за некорректных входных данных. Просто проводя положительное тестирование, мы можем только убедиться, что наша система работает в нормальных условиях. Мы должны убедиться, что наша система может справиться с непредвиденными условиями, чтобы обеспечить 100% безошибочную систему. Типичные примеры: ввести неправильно составленный e-mail и номер телефона, загрузить файл не предусмотренного расширения или размера.  Для деструктивного тестирования существует множество способов его тестирования: 
Метод анализа точек отказа: это пошаговое прохождение системы, проводящее оценку того, что может пойти не так в разных точках. Для этой стратегии может быть использована помощь BA (Business Analyst). 
Экспертная проверка тестировщика: проанализируйте или дайте на ревью ваши Test вашему коллеге-тестировщику, который менее знаком с системой/функцией 
Бизнес-анализ тестовых случаев. Конечные пользователи или эксперты могут подумать о многих допустимых сценариях, которые иногда тестировщики могут не учитывать или упустить, так как все их внимание будет сосредоточено на тестировании требований. 
Проведите предварительное тестирование с использованием контрольных таблиц (run sheets). Исследовательское тестирование с использованием контрольных таблиц поможет определить, что было проверено, повторить тесты и позволит вам контролировать охват тестами. 
Используйте другой источник: вы можете попросить кого-нибудь сломать программный продукт и проанализировать различные сценарии.



**22.Что такое недеструктивное/неразрушающее/позитивное тестирование? (NDT – Non Destructive testing)**
НЕДЕСТРУКТИВНОЕ ТЕСТИРОВАНИЕ - это тип тестирования программного обеспечения, который включает в себя правильное взаимодействие с программным обеспечением. Другими словами, неразрушающее тестирование (NDT) также можно назвать позитивным тестированием или тестированием «счастливого пути». Это дает ожидаемые результаты и доказывает, что программное обеспечение ведет себя так, как ожидалось. Пример: - Ввод правильных данных в модуль входа в систему и проверка, принимает ли он учетные данные и переходит на следующую страницу



**23)Что подразумевается под компонентным/модульным/юнит тестированием? (Component/Module/Unit testing)**
Тестируются отдельные части (модули) системы.



**24)Что подразумевается под интеграционным тестированием?**
Integration testing- тестируется взаимодействие между отдельными модулями.



**25)Разница между Unit testing и Integration testing?**
Unit testing- это тестирование одного конкретного модуля, а Integration testing - это тестирование взаимодействия между модулями



**26)Что такое системное интеграционное тестирование? (SIT — System Integration testing) **
Это тип тестирования программного обеспечения, проводимого в интегрированной аппаратной и программной среде для проверки поведения всей системы. Это тестирование, проведенное на полной интегрированной системе для оценки соответствия системы ее установленным требованиям. SIT выполняется для проверки взаимодействия между модулями программной системы. Оно занимается проверкой требований к программному обеспечению высокого и низкого уровня, указанных в Software Requirements Specification/Data and the Software Design Document. Он также проверяет сосуществование программной системы с другими и тестирует интерфейс между модулями программного приложения. В этом типе тестирования модули сначала тестируются индивидуально, а затем объединяются в систему. Например, программные и / или аппаратные компоненты объединяются и тестируются постепенно, пока не будет интегрирована вся система.



**27)В чем разница между тест-драйвером и тест-заглушкой? (Test Driver and Test Stub)**
Тестовый драйвер - это фрагмент кода, который вызывает тестируемый программный компонент. Это полезно при тестировании по принципу «снизу-вверх». Тестовая заглушка - это фиктивная программа, которая интегрируется с приложением для полной функциональности. Они актуальны для тестирования, в котором используется нисходящий подход. Давайте возьмем пример.  1. Допустим, есть сценарий для проверки интерфейса между модулями A и B. Мы разработали только модуль-A. Затем мы можем проверить модуль-A, если у нас есть реальный модуль-B или фиктивный модуль для него. В этом случае мы называем модуль-B тестовой заглушкой.  2. Теперь модуль B не может отправлять или получать данные напрямую из модуля A. В таком сценарии мы перемещаем данные из одного модуля в другой, используя некоторые внешние функции, называемые Test Driver. Заглушки и драйверы не реализуют всю логику программного модуля, а только моделируют обмен данными с вызывающим модулем. Заглушка: вызывается тестируемым модулем. Драйвер: вызывает модуль для тестирования.


**28.Что подразумевается под системным тестированием?**
Системное тестирование качественно отличается от интеграционного и модульного уровней. Системное тестирование рассматривает тестируемую систему в целом и оперирует на уровне пользовательских интерфейсов, в отличие от последних фаз интеграционного тестирования, которое оперирует на уровне интерфейсов модулей. Различны и цели этих уровней тестирования. На уровне системы часто сложно и малоэффективно анализировать прохождение тестовых траекторий внутри программы или отслеживать правильность работы конкретных функций. Основная задача системного тестирования - в выявлении дефектов, связанных с работой системы в целом, таких как неверное использование ресурсов системы, непредусмотренные комбинации данных пользовательского уровня, несовместимость с окружением, непредусмотренные сценарии использования, отсутствующая или неверная функциональность, неудобство в применении и тому подобное. Системное тестирование производится над проектом в целом с помощью метода "черного ящика". Структура программы не имеет никакого значения, для проверки доступны только входы и выходы, видимые пользователю. 
Категории тестов системного тестирования:
   -Полнота решения функциональных задач.
   -Стрессовое тестирование - на предельных объемах нагрузки входного потока.
   -Корректность использования ресурсов (утечка памяти, возврат ресурсов).
   -Оценка производительности.
   -Эффективность защиты от искажения данных и некорректных действий.
   -Проверка инсталляции и конфигурации на разных платформах.
   -Корректность документации
Для минимизации рисков, связанных с особенностями поведения системы в той или иной среде, во время тестирования рекомендуется использовать окружение максимально приближенное к тому, на которое будет установлен продукт после выдачи. Системное тестирование относят к черному ящику. Можно выделить два подхода к системному тестированию:
   -на базе требований (requirements based): Для каждого требования пишутся Test case, проверяющие выполнение данного требования.
   -на базе случаев использования (use case based): На основе представления о способах использования продукта создаются случаи использования системы (Use Cases). По    -конкретному случаю использования можно определить один или более сценариев. На проверку каждого сценария пишутся Test case, которые должны быть протестированы.


**29.Что такое функциональное тестирование?**
Это тестирование функций продукта на соответствие требованиям. Оценка на основе сравнения ожидаемых  (указанных в документации/требованиях) и полученных результатов. Важными условиями являются: Ввод корректных и неккоректных данных; Прохождение по предусмотренным документацией и альтернативным сценариям.


**30) Что такое тестирование совместимости/взаимодействия? (Compatibility/Interoperability testing)**
Тестирование взаимодействия - функциональное тестирование, проверяющее способность приложения/устройства взаимодействовать с одним и более компонентами/системами/устройствами и включающее в себя тестирование совместимости (compatibility testing) и интеграционное тестирование (integration testing).  ПО с хорошими характеристиками взаимодействия может быть легко интегрировано с другими системами, не требуя каких-либо серьезных модификаций. В этом случае, количество изменений и время, требуемое на их выполнение, могут быть использованы для измерения возможности взаимодействия. Например, тестирование совместимости проводится между смартфонами и планшетами для проверки передачи данных через Bluetooth. Существуют разные уровни тестирования совместимости:
    - Аппаратное обеспечение: проверяет совместимость программного обеспечения с различными аппаратными конфигурациями. 
    - Операционные системы: Он проверяет ваше программное обеспечение на совместимость с различными операционными системами, такими как Windows, Unix*, Mac OS и т. д. 
    - Программное обеспечение: проверяет ваше разработанное программное обеспечение на совместимость с другим программным обеспечением. Например, приложение MS Word должно быть совместимо с другими программами, такими как MS Outlook, MS Excel, VBA и т. д. 
    - Сеть: оценка производительности системы в сети с различными параметрами, такими как пропускная способность, скорость работы, емкость. 
    - Браузер: проверяет совместимость вашего сайта с различными браузерами, такими как Firefox, Google Chrome, Internet Explorer и т. д. 
    - Устройства: проверяет совместимость вашего программного обеспечения с различными устройствами, такими как устройства USB-порта, принтеры и сканеры, другие мультимедийные устройства и Bluetooth. 
    - Mobile: проверка совместимости вашего программного обеспечения с мобильными платформами, такими как Android, iOS и т. д. 
    - Версии программного обеспечения. Он проверяет совместимость вашего программного приложения с различными версиями программного обеспечения. Например, проверка вашего Microsoft Word на совместимость с Windows 7, Windows 7 SP1, Windows 7 SP2, Windows 7 SP3.
Существует два типа проверки версий:
    - Тестирование обратной совместимости предназначено для проверки поведения разработанного аппаратного / программного обеспечения с использованием более старых версий аппаратного / программного обеспечения. 
    - Тестирование прямой совместимости заключается в проверке поведения разработанного аппаратного / программного обеспечения с использованием более новых версий аппаратного / программного обеспечения.
Пример тестирования взаимодействия: 
    - Подключите (connect) два или более устройств от разных производителей 
    - Проверьте связь между устройствами 
    - Проверьте, может ли устройство отправлять / получать пакеты или фреймы друг от друга 
    - Проверьте, правильно ли обрабатываются данные на уровне сети и объектов 
    - Проверьте, правильно ли работают реализованные алгоритмы 
    - Результат в порядке: проверьте следующий результат. Результат не в порядке: используйте инструменты мониторинга, чтобы обнаружить источник ошибки 
    -Отчет о результатах в тестовом отчете.



**31)Что такое тестирование на соответствие? (Conformance/Compilance testing)**
CONFORMANCE testing - это тип тестирования программного обеспечения, который удостоверяет, что система программного обеспечения соответствует стандартам и правилам, определенным IEEE, W3C или ETSI. Цель проверки соответствия состоит в том, чтобы определить, в какой степени отдельная реализация конкретного стандарта соответствует индивидуальным требованиям этого стандарта. Включает в себя: 
    -Производительность
    -Функции 
    -Прочность (Robustness)
    -Совместимость (Interoperability) 
    -Поведение системы
Тестирование соответствия может быть логическим или физическим, и оно включает в себя следующие типы тестирования: 
   -Тестирование на соответствие (Compliance testing)
   -Нагрузочное тестирование (Load testing)
   -Стресс тестирование (Stress testing)
   -Объемное тестирование (Volume testing)

   Conformance testing
     -Conformance является формальным и точным способом тестирования стандартов
     -Сертификация Conformance применима только к операционной системе, имеющей официальный Certification Authority
     -Conformance testing используется для тестирования системы, которая обеспечивает полную поддержку данных стандартов
   Compliance testing
     -Compliance является неформальным и менее точным способом тестирования стандартов
     -Операционная система, которая обеспечивает единый API (Portable Operating System Interface), считается совместимой
     -Compliance testing используется для тестирования системы, обеспечивающей поддержку некоторых из указанных стандартов
Тестирование соответствия также называется Type testing, который является формальным способом тестирования.


**32.Что такое нефункциональное тестирование?**
Это тестирование характеристик продукта.

НЕФУНКЦИОНАЛЬНОЕ тестирование определяется как тип тестирования ПО для проверки нефункциональных аспектов ПО. Оно предназначено для проверки готовности системы по нефункциональным параметрам, которые никогда не учитываются при функциональном тестировании.
    - Нефункциональное тестирование должно повысить удобство использования, эффективность, ремонтопригодность и portability продукта. 
    - Помогает снизить производственный риск и затраты, связанные с нефункциональными аспектами продукта. 
Позволяет:
    - оптимизировать способ установки, настройки, выполнения, управления и мониторинга продукта. 
    - Собирать и производить измерения и метрики для внутренних исследований и разработок. 
    - Улучшать и расширять знания о поведении продукта и используемых технологиях.
Основные нефункциональные типы тестирования:
    - Производительности (Performance)
        * Стрессовое (Stress testing)
        * Тестирование емкости/способностей (Capacity testing)
        * Нагрузочное (Load testing)
        * Объемное тестирование (Volume testing)
        * Выносливости/стабильности/надежности (Soak/Endurance/Stability/Reliability testing)
        * Шиповое (Spike)
        * Масштабируемости (Scalability Test)
    - Тестирование времени отклика (Response Time testing)
    - Тестирование на отказоустойчивость (Failover testing)
    - Тестирование совместимости (Compatibility testing)
    - Тестирование на удобство пользования (Usability testing)
    - Тестирование на поддерживаемость/ремонтопригодность (Maintainability testing)
    - Тестирование безопасности (Security testing)
    - Тестирование аварийного восстановления (Disaster Recovery testing)
    - Тестирование на соответствие (Compliance testing)
    - Тестирование переносимости (Portability testing)
    - Тестирование эффективности (Efficiency testing)
    - Базовое тестирование (Baseline testing)
    - Тестирование документации (Documentation testing)
    - Тестирование восстановления (Recovery testing)
    - Интернационализация (Globalization/Internationalization testing)
    - Тестирование локализации (Localization testing)


**33)Что вы знаете о Тестировании удобства пользования?(Usability testing)**
Тестирование удобства пользования - это метод тестирования, направленный на установление степени удобства использования, обучаемости, понятности и привлекательности для пользователей разрабатываемого продукта в контексте заданных условий. Тестирование удобства пользования дает оценку уровня удобства использования приложения по следующим пунктам:
    - производительность, эффективность (efficiency) - сколько времени и шагов понадобится пользователю для завершения основных задач приложения, например, размещение новости, регистрации, покупка и т. д. ? (меньше - лучше)
    - правильность (accuracy) - сколько ошибок сделал пользователь во время работы с приложением? (меньше - лучше)
    - активизация в памяти (recall) – как много пользователь помнит о работе приложения после приостановки работы с ним на длительный период времени? (повторное выполнение операций после перерыва должно проходить быстрее чем у нового пользователя)
    - эмоциональная реакция (emotional response) – как пользователь себя чувствует после завершения задачи - растерян, испытал стресс? Порекомендует ли пользователь систему своим друзьям? (положительная реакция - лучше)
Проверка удобства использования может проводиться как по отношению к готовому продукту, посредством тестирования черного ящика (black box testing), так и к интерфейсам приложения (API), используемым при разработке - тестирование белого ящика (white box testing). В этом случае проверяется удобство использования внутренних объектов, классов, методов и переменных, а также рассматривается удобство изменения, расширения системы и интеграции ее с другими модулями или системами. Использование удобных интерфейсов (API) может улучшить качество, увеличить скорость написания и поддержки разрабатываемого кода, и как следствие улучшить качество продукта в целом. Отсюда становится очевидно, что тестирование удобства пользования может производиться на разных уровнях разработки ПО: модульном, интеграционном, системном и приемочном.



**34) Отличия тестирование на удобство пользования и тестирования доступности? (Usability Vs. Accessibility testing)**
USABILITY testing показывает, насколько проста в использовании и удобна система программного обеспечения. Здесь небольшой набор целевых конечных пользователей «использует» программную систему для выявления дефектов юзабилити. Основное внимание в этом тестировании уделяется простоте использования приложения пользователем, гибкости в управлении средствами управления и способности системы выполнять свои задачи. Это также называется тестированием пользовательского опыта (UX – "Ю-Экс", user experience). Это тестирование рекомендуется на начальном этапе разработки SDLC, что позволяет лучше понять ожидания пользователей. Исследования (Virzi, 1992 и Neilsen Landauer, 1993) показывают, что 5 пользователей достаточно для выявления 80% проблем с юзабилити, хотя некоторые исследователи предлагают другие цифры. Тестирование доступности (accessibility testing) - это подмножество юзабилити-тестирования. Его цель - убедиться в том, что наш продукт удобен в использовании для людей с различными видами инвалидности или особенностей восприятия. Это могут быть проблемы со зрением, слухом или ограничения в подвижности рук.  Ваш продукт должен правильно работать с соответствующим ПО. Примеры такого программного обеспечения:
    - Speech Recognition Software - ПО преобразует произнесенное слово в текст, который служит вводом для компьютера. 
    - Программа для чтения с экрана - используется для озвучивания текста, отображаемого на экране 
    - Программное обеспечение для увеличения экрана - используется для увеличения масштаба элементов и облегчения чтения для пользователей с нарушениями зрения. 
    - Специальная клавиатура, облегчающая ввод для пользователей, у которых проблемы с двигательными функциями.
Еще один из примеров - люди с цветовой слепотой (дальтонизмом). Эта особенность довольно широко распространена. Различными видами цветовой слепоты страдают около 8 % мужчин и 0,4 % женщин - не так уж мало! Цвет не должен быть единственным способом передачи информации. Если вы используете цвет для того, чтобы, допустим, отобразить статус, эту информацию стоит продублировать еще каким-то образом - геометрическими фигурами, иконками или текстовым комментарием. Хорошая контрастность. Хорошая контрастность обеспечивает нормальную видимость элементов управления и текста даже для людей, не различающих те или иные оттенки. Есть отличный инструмент для тестирования веб-сайтов на предмет доступности для людей с различными формами цветовой слепоты: Color Blind Web Page Filter.  

Если вы хотите сократить количество тестов, можно ограничиться только тремя фильтрами: дейтеранопия, протанопия и тританопия. Это наиболее выраженные формы цветовой слепоты (не считая крайне редкого черно-белого зрения). Остальные люди с особенностями цветовосприятия видят больше оттенков, и если ваш UI достаточно хорошо виден с этими тремя фильтрами, то и для остальных будет отображаться корректно. Пример чек-листа:
    - Предоставляет ли приложение клавиатурные эквиваленты для всех действий мышью и окон? 
    - Предоставляются ли инструкции как часть пользовательской документации или руководства? Легко ли понять и использовать приложение, используя документацию? 
    - Упорядочены ли вкладки логически для обеспечения плавной навигации? 
    - Предусмотрены ли сочетания клавиш для меню? 
    - Поддерживает ли приложение все операционные системы? 
    - Четко ли указано время отклика каждого экрана или страницы, чтобы конечные пользователи знали, как долго ждать? 
    - Все ли надписи правильно написаны? 
    - Являются ли цвета подходящим для всех пользователей? 
    - Правильно ли используются изображения или значки, чтобы их было легко понять конечным пользователям? 
     Есть ли звуковые оповещения? 
    - Может ли пользователь настроить аудио или видео элементы управления? 
    - Может ли пользователь переопределить шрифты по умолчанию для печати и отображения текста? 
    - Может ли пользователь настроить или отключить мигание, вращение или перемещение элементов? 
    - Убедитесь, что цветовое кодирование никогда не используется в качестве единственного средства передачи информации или указания на действие 
    - Видна ли подсветка с инвертированными цветами? 
    - Тестирование цвета в приложении путем изменения контрастности 
    - Правильно ли слышат люди с ограниченными возможностями все имеющее отношение к аудио и видео?
    - Протестируйте все мультимедийные страницы без мультимедиа-оборудования. 
    - Предоставляется ли обучение пользователям с ограниченными возможностями, что позволит им ознакомиться с программным обеспечением или приложением?
 


**35.Что такое тестирование интерфейса?**
Это тип интеграционного теста, который проверяет, правильно ли установлена связь между двумя различными программными системами или их частями (модулями). Соединение, которое объединяет два компонента, называется интерфейсом.Этот интерфейс в компьютерном мире может быть чем угодно, как API, так и веб-сервисами и т. д.  Тестирование этих подключаемых сервисов или интерфейса называется Тестированием интерфейса. Тестирование интерфейса включает в себя тестирование двух основных сегментов: 
Интерфейс веб-сервера и сервера приложений 
Интерфейс сервера приложений и базы данных




**36) Что такое тестирование рабочего процесса/воркфлоу?**
Это тип тестирования программного обеспечения, который проверяет, что каждый software workflow точно отражает данный бизнес-процесс. Workflow - это серия задач для получения желаемого результата, которая обычно включает несколько этапов или шагов. Для любого бизнес-процесса тестирование этих последовательных шагов определяется как «WorkFlow testing». Например, убедитесь, что система может быть установлена ​​на платформе пользователя и работает правильно. Тестирование рабочего процесса проводится поэтапно. Вот как вы будете выполнять Workflow testing:
   -Начальная фаза (Inception phase): эта фаза включает начальное планирование испытаний и тестирование прототипа 
   -Фаза разработки (Elaboration phase): Эта фаза включает базовую архитектуру тестирования 
   -Фаза строительства (Construction phase): эта фаза включает в себя значительные испытания в каждой сборке 
   -Фаза перехода (Transition phase): Эта фаза включает в себя регрессионные тесты и повторные тесты исправлений
Тестирование workflow выполняется:
   -Test engineer: планирует цели теста и график. Определяет Test case и процедуры. Оценивает результаты теста.
   -Component engineer: Разработка тестовых компонентов. Автоматизирует некоторые тестовые процедуры.
   -Integration Tester: Выполнение интеграционных тестов и выявление дефектов 
   -System Testers: Выполнение системных тестов и отчеты о дефектах



**37) Что вы знаете о пользовательском приемочном тестировании? (UAT – User Acceptance testing)
Пользовательское приемочное тестирование (UAT) - это тип тестирования, выполняемый конечным пользователем или клиентом для проверки / принятия ПО перед его перемещением в production. UAT выполняется на заключительном этапе тестирования после выполнения функциональных, интеграционных и системных испытаний. Основной целью UAT является проверка end-to-end business flow. Он не фокусируется на косметических ошибках, орфографических ошибках или тестировании системы. Приемочное тестирование пользователя выполняется в отдельной среде тестирования с настройкой данных, аналогичных производственным. Это своего рода тестирование черного ящика, в котором будут участвовать два или более конечных пользователя. Этапы:
    - Анализ бизнес-требований 
    - Создать плана тестирования UAT 
    - Определить Test Scenario 
    - Создать Test case UAT 
    - Подготовить Test Data (Production like Data) 
    - Запустить Test case
    - Записать результаты
    - Подтвердить бизнес-цели


**38) Что такое эксплуатационное приемочное тестирование? (OAT — Operational Acceptance testing)
ИСПЫТАНИЕ НА ЭКСПЛУАТАЦИЮ (OAT) - это тип тестирования программного обеспечения, который оценивает операционную готовность программного приложения до его выпуска в производство. Целью эксплуатационного тестирования является обеспечение бесперебойной работы системы в ее стандартной операционной среде (SOE - standard operating environment). Это также называется Оперативное тестирование (Operational testing). Эксплуатационное приемочное тестирование обеспечивает соответствие системы и компонентов в стандартной операционной среде приложения (SOE). Типы OAT:
    - Installation testing
    - Load & Performance Test Operation
    - Backup and Restore testing
    - Security testing
    - Code Analysis
    - Fail over testing
    - Recovery testing
    - End-to-End Test Environment Operational testing
    - Operational Documentation Review
Примеры Test case:
    - Резервные копии, сделанные на одном сайте, могут быть развернуты на тот же сайт 
    - Резервные копии, сделанные на одном сайте, можно развернуть на другом сайте. 
    - Внедрение любых новых функций в живую производственную среду не должно отрицательно влиять на целостность текущих производственных услуг. 
    - Процесс внедрения может быть воспроизведен с использованием действующей документации 
    - Каждый компонент может быть отключен и успешно запущен в согласованные сроки. 
    - Для оповещений - все критические оповещения должны идти в TEC и ссылаться на документ правильного разрешения. 
    - Оповещения созданы и выдаются при превышении согласованных пороговых значений 
    - Любая документация по восстановлению, созданная или измененная, включая сервисные диаграммы, действительна 
    - Это должно быть передано в соответствующие области поддержки. 
    - Любой компонент, на который влияет сбой, должен показывать рекомендуемый порядок перезапуска, время завершения и т. д. 




**39) Что такое инсталляционное тестирование?**
Тестирование инсталляции (установки) направленно на проверку успешной инсталляции и настройки, а также обновления или удаления ПО, как десктопного, так и мобильного. Тестирование инсталляции в большинстве своем не входит в Веб-тестирование, являясь специализированным тестированием установки приложений на различные операционные системы. Следующие проверки должны быть выполнены для этапов: Установка. 
    - Установка должна начаться при клике по кнопке, подтверждающей данное действие
    - Установки во всех поддерживаемых окружениях и на всех поддерживаемых платформах
    - Установки в неподдерживаемых окружениях, а также в нужных окружениях с некорректными настройками
    - Права, которые требует инсталляция (чаще всего они должны быть админскими), проверить установить приложение как гость
    - Установки в clean state (при отсутствии любых возможных связанных файлов и предыдущих версий)
    - Подсчитывается ли при установке количество свободного места на диске и выдается ли предупреждение если места недостаточно
    - Установки загруженного ранее приложения, а также прямая установка с использованием сети/беспроводного соединения
    - Восстановится ли процесс установки при внезапном его прерывании (отключение устройства, отказ сети, отключение беспроводного соединения)
    - Установка приложения, его запуск, удаление приложения должны возвращать систему в исходное состояние
    - Распознается ли наличие в системе приложений/программ, необходимых для корректной работы устанавливаемого приложения
    - Повторный запуск установки приложения при уже текущем должен выдавать корректное сообщение, двойная установка должна быть исключена
    - Процесс установки может быть настраиваемый/дефолтный. Убедиться, что оба корректно работают
    - Наличие кнопки, которая предложит сохранить приложение в определенную папку, а также указывает дефолтное местоположение ("C:/programs/.")
    - Правильно ли установлены, сохранены ли в корректных папках файлы приложения
    - Наличие созданных ярлыков, корректно ли они расположены
    - После установки в системной вкладке " Программы и компоненты" должны быть доступны: название приложения, иконка, имя издателя, размер приложения, дата установки и номер версии
    - Настройки переменных сред PATH
    - Убедиться, что лицензионный ключ сохраняется в Windows Registry library
    - Поддерживает ли приложение функции ‘UnInstall’, ‘Modify’, ‘ReInstall’ и корректно ли они работают
    - Работа приложения с уже существующими DLL-файлами, с DLL-файлами приложений, которые необходимы для корректной работы устанавливаемого приложения
    - Наличие информации/сообщение о том, когда истекает срок действия установленной пробной версии приложения
Обновление:
    - Поддерживает ли приложение функцию обновления/автообновления
    - При попытке установить ранее установленную версию приложения система должна ее распознать и выдать корректное сообщение
    - Сохраняются ли пользовательские настройки при попытке загрузить новую версию/обновить старую версию
    - При попытке обновить версию должны быть доступны функции удалить приложение и восстановить приложение
    - Стандартные проверки как при первичной установке приложения
    - Убедиться, что номер версии приложения сменился новым
    - Запустить приложение и убедиться, что оно работает корректно
Откат до предыдущей версии:
    - Попробовать установить старую версию на более новую
    - Наличие корректного сообщения при попытке отката
    - Убедиться, что приложение работает корректно
Удаление приложения:
    - Не остается ли в системе никаких папок/файлов/ярлыков/ключей реестра после полного удаления приложения
    - Корректно ли работает система после установки и последующего удаления приложения.




**40.Что вы знаете о тестировании безопасности? (Security and Access Control testing)**
Это тип тестирования ПО, который выявляет уязвимости, угрозы и риски. Целью тестов безопасности является выявление всех возможных лазеек и слабых мест в ПО, которые могут привести к потере информации, доходов, репутации компании, сотрудников или клиентов. Общая стратегия безопасности основывается на трех основных принципах:
    - Конфиденциальность - сокрытие определенных ресурсов или информации
    - Целостность – ресурс может быть изменен только в соответствии с полномочиями пользователя
    - Доступность - ресурсы должны быть доступны только авторизованному пользователю, внутреннему объекту или устройству
Тестирование безопасности обычно выполняет отдельный специалист по безопасности. В ходе тестирования безопасности испытатель играет роль взломщика. Ему разрешено все:
    - попытки узнать пароль с помощью внешних средств;
    - атака системы с помощью специальных утилит, анализирующих защиты;
    - подавление, ошеломление системы (в надежде, что она откажется обслуживать других клиентов);
    - целенаправленное введение ошибок в надежде проникнуть в систему в ходе восстановления;
    - просмотр несекретных данных в надежде найти ключ для входа в систему.
При неограниченном времени и ресурсах хорошее тестирование безопасности взломает любую систему. Задача проектировщика системы — сделать цену проникновения более высокой, чем цена получаемой в результате информации. Типы тестирования безопасности:
    - Сканирование уязвимостей/оценка защищенности (Vulnerability Scanning) выполняется с помощью автоматизированного ПО для сканирования системы на наличие известных сигнатур уязвимостей. 
    - Сканирование безопасности (Security Scanning) включает в себя выявление слабых сторон сети и системы, а затем предоставляет решения для снижения этих рисков. Это сканирование может быть выполнено как ручным, так и автоматизированным.
    - Тестирование на проникновение (Penetration testing) - этот тип тестирования имитирует атаку злоумышленника. Это тестирование включает анализ конкретной системы для проверки потенциальных уязвимостей при попытке внешнего взлома. 
    - Оценка рисков (Risk Assessment) тестирование включает анализ рисков безопасности, наблюдаемых в организации. Риски классифицируются как Низкие, Средние и Высокие. Это тестирование рекомендует меры по снижению риска. 
    - Аудит безопасности (Security Auditing) - внутренняя проверка приложений и операционных систем на наличие уязвимостей. Аудит также может быть выполнен путем построчной проверки кода 
    - Этический взлом (Ethical hacking) - совершается с целью выявления проблем безопасности в системе. Это делается White Hat хакерами - это специалисты по безопасности, которые использует свои навыки законным способом для помощи в выявлении дефектов системы, в отличии от Black Hat (преступников) или Gray Hat (что-то между).
    - Оценка состояния (Posture Assessment) объединяет сканирование безопасности, этический взлом и оценки рисков, чтобы показать общее состояние безопасности организации.
SDLC фаза            Security Processes
----------           -------------------
Requirements         Анализ безопасности для требований и проверка случаев злоупотребления / неправильного использования
Design               Анализ рисков безопасности для проектирования. Разработка плана тестирования с учетом тестирования безопасности
Coding and Unit testing   Статическое и динамическое тестирование безопасности и тестирование белого ящика 
Integration testing       Тестирование черного ящика
System testing        Тестирование черного ящика и сканирование уязвимостей
Implementation        Тестирование на проникновение, сканирование уязвимостей
Support               Анализ воздействия патчей


**41)Что такое конфигурационное тестирование?(Configuration testing)**
Конфигурационное тестирование (Configuration testing) — специальный вид тестирования, направленный на проверку работы ПО при различных аппаратных и программных конфигурациях системы (заявленных платформах, поддерживаемых драйверах, при различных конфигурациях компьютеров и т. д. ) В зависимости от типа проекта конфигурационное тестирование может иметь разные цели:
    - Проект по профилированию работы системы Цель Тестирования: определить оптимальную конфигурацию оборудования, обеспечивающую требуемые характеристики производительности и времени реакции тестируемой системы.
    - Проект по миграции системы с одной платформы на другую Цель Тестирования: Проверить объект тестирования на совместимость с объявленным в спецификации оборудованием, операционными системами и программными продуктами третьих фирм.
Для клиент-серверных приложений конфигурационное тестирование можно условно разделить на два уровня (для некоторых типов приложений может быть актуален только один):
    - Серверный
    - Клиентский
На первом (серверном) уровне, тестируется взаимодействие выпускаемого ПО с окружением, в которое оно будет установлено:
    - Аппаратные средства (тип и количество процессоров, объем памяти, характеристики сети / сетевых адаптеров и т. д.)
    - Программные средства (ОС, драйвера и библиотеки, стороннее ПО, влияющее на работу приложения и т. д.)
Основной упор здесь делается на тестирование с целью определения оптимальной конфигурации оборудования, удовлетворяющего требуемым характеристикам качества (эффективность, портативность, удобство сопровождения, надежность). На следующем (клиентском) уровне, ПО тестируется с позиции его конечного пользователя и конфигурации его рабочей станции. На этом этапе будут протестированы следующие характеристики: удобство использования, функциональность. Для этого необходимо будет провести ряд тестов с различными конфигурациями рабочих станций:
    - Тип, версия и битность операционной системы (подобный вид тестирования называется кроссплатформенное тестирование)
    - Тип и версия Web браузера, в случае если тестируется Web приложение (подобный вид тестирования называется кросс-браузерное тестирование)
    - Тип и модель видеоадаптера (при тестировании игр это очень важно)
    - Работа приложения при различных разрешениях экрана
    - Версии драйверов, библиотек и т. д.  (для JAVA приложений версия JAVA машины очень важна, тоже можно сказать и для .NET приложений касательно версии .NET библиотеки)
и т. д.  Перед началом проведения конфигурационного тестирования рекомендуется:
    - создавать матрицу покрытия (матрица покрытия - это таблица, в которую заносят все возможные конфигурации),
    - проводить приоритезацию конфигураций (на практике, скорее всего, все желаемые конфигурации проверить не получится),
    - шаг за шагом, в соответствии с расставленными приоритетами, проверять каждую конфигурацию.
Уже на начальном этапе становится очевидно, что чем больше требований к работе приложения при различных конфигурациях рабочих станций, тем больше тестов нам необходимо будет провести. В связи с этим, рекомендуем, по возможности, автоматизировать этот процесс, так как именно при конфигурационном тестировании автоматизация реально помогает сэкономить время и ресурсы. Конечно же автоматизированное тестирование не является панацеей, но в данном случае оно окажется очень эффективным помощником. В итоге: конфигурационным называется тестирование совместимости выпускаемого продукта (ПО) с различным аппаратным и программным средствами. Основные цели - определение оптимальной конфигурации и проверка совместимости приложения с требуемым окружением (оборудованием, ОС и т. д.). Автоматизация конфигурационного тестирования позволяет избежать лишних расходов Примечание: в ISTQB вообще не говорится о таком виде тестирования как конфигурационное. Согласно глоссарию, данный вид тестирования рассматривается там как тестирование портируемости: configuration testing: See portability testing. portability testing: The process of testing to determine the portability of a software product.
  


** 42)Объясните, что такое тестирование N+1?**
Вариант регрессионного тестирования представлен как N+1. В этом методе тестирование выполняется в несколько циклов, в которых ошибки, обнаруженные в тестовом цикле «N», устраняются и повторно тестируются в тестовом цикле N + 1. Цикл повторяется, пока не будет найдено ни одной ошибки.



** 43) Что вы знаете о тестировании сборки? (Build Verification Test)**
Тестирование, направленное на определение соответствия, выпущенной версии, критериям качества для начала тестирования. По своим целям является аналогом Дымового Тестирования, направленного на приемку новой версии в дальнейшее тестирование или эксплуатацию. Вглубь оно может проникать дальше, в зависимости от требований к качеству выпущенной версии.



**44)Что такое тестирование потоков? (Thread testing)
Тестирование потоков определяется как тип тестирования программного обеспечения, который проверяет основные функциональные возможности конкретной задачи (потока). Обычно проводится на ранней стадии фазы интеграционного тестирования. Тестирование на основе потоков является одной из дополнительных стратегий, принятых в ходе тестирования системной интеграции. Поэтому его, вероятно, следует более правильно назвать «тестом взаимодействия потоков» (thread interaction test). Тестирование на основе потоков подразделяется на две категории:
    - Однопоточное тестирование включает одну транзакцию приложения за раз 
    - Многопоточное тестирование включает одновременно несколько активных транзакций
Как производить:
    - Тестирование на основе потоков является обобщенной формой тестирования на основе сеансов (session-based testing), в котором сеансы являются формой потока, но поток не обязательно является сеансом. 
    - Для тестирования потока, поток или программа (небольшая функциональность) интегрируются и тестируются постепенно как подсистема, а затем выполняются для всей системы. 
    - На самом низком уровне оно предоставляет интеграторам лучшее представление о том, что тестировать. 
    - Вместо непосредственного тестирования программных компонентов требуется, чтобы интеграторы сосредоточились на тестировании логических путей выполнения в контексте всей системы.



**45) Что вы знаете о мутационном тестировании? (Mutation testing)**
Mutation testing - это тип тестирования программного обеспечения, в котором мы мутируем (меняем) определенные выражения в исходном коде и проверяем, способны ли Test case найти ошибки. Это тип тестирования белого ящика, который в основном используется для модульного тестирования. Изменения в мутантной программе сохраняются крайне небольшими, поэтому это не влияет на общую цель программы. Цель Mutation testing - оценить качество Test case, которые должны быть достаточно надежными, чтобы не выполнять мутантный код. Этот метод также называется стратегией тестирования на основе ошибок, так как он включает в себя создание ошибки в программе. 
    - Шаг 1: Ошибки вводятся в исходный код программы путем создания множества версий, называемых мутантами. Каждый мутант должен содержать одну ошибку, и цель состоит в том, чтобы заставить версию мутанта потерпеть неудачу, что демонстрирует эффективность Test case. 
    - Шаг 2: Test case применяются к исходной программе, а также к программе мутанта. 
    - Шаг 3: Сравните результаты оригинальной и мутантной программы. 
    - Шаг 4: Если исходная программа и программы-мутанты генерируют разные выходные данные, то этот мутант уничтожается by the Test case. Следовательно, Test case достаточно хорош, чтобы обнаружить изменение между оригинальной и мутантной программой. 
    - Шаг 5: Если исходная программа и программа-мутант генерируют одинаковые выходные данные, мутант остается в живых. В таких случаях необходимо создать более эффективные Test case, которые убивают всех мутантов.
Что изменить в программе мутантов? Есть несколько методов, которые могут быть использованы для создания мутантных программ: 
    - Операторы замены операндов (Operand replacement operators) – например, в условии if (x> y) поменять местами значения x и y
    - Операторы модификации выражений (Expression Modification Operators) – например, в условии if (х == у) Мы можем заменить == на >=
    - Операторы модификации операторов (Statement modification Operators) – например, удалить часть else в конструкции if-else или удалить целиком конструкцию if-else, чтобы проверить, как ведет себя программа
Оценка мутации = (убитые мутанты / общее количество мутантов) * 100
Автоматизированные инструменты для разных ЯП: mutmut, Humbug и Infection и т.п. 



** 47) В чем разница между Baseline и Benchmark testing?**
Baseline предназначено для оценки производительности приложения. Benchmark сравнивает производительность приложения с отраслевым стандартом. 
    - Baseline тестирование использует данные, собранные для повышения производительности. Benchmark возвращает информацию о целевом приложении по сравнению с другими приложениями.
    - Baseline тестирование сравнивает текущую производительность с предыдущей производительностью приложения, тогда как Benchmark сравнивает производительность нашего приложения с производительностью конкурентов.



**48) Что такое A/B тестирование?**
A / B-тестирование также называется сплит-тестированием (split). При тестировании AB мы создаем и анализируем два варианта приложения, чтобы найти, какой вариант работает лучше с точки зрения пользовательского опыта, потенциальных клиентов, конверсий или любой другой цели, а затем в конечном итоге сохранить наиболее эффективный вариант.  Давайте попробуем понять это на примере. Предположим, у нас есть интернет магазин и каталог отображается определенным образом. В какой-то момент (новые маркетинговые исследования/пожелания клиента и т. д.) решено изменить дизайн выдачи товаров в каталоге. Независимо от того, сколько проведено анализа, выпуск нового пользовательского интерфейса будет большим изменением и может иметь неприятные последствия.  В этом случае мы можем использовать A / B-тестирование. Мы создадим интерфейс нового варианта и выпустим его для некоторого процента пользователей. Например - мы можем распределить пользователей в соотношении 50:50 или 80:20 между двумя вариантами - A и B. После этого в течение определенного периода времени мы будем наблюдать эффективность обоих вариантов. Таким образом, тестирование A/B помогает принять решение о выборе лучшего варианта.
Доп. материал: Ошибки в дизайне A/B тестов, которые я думала, что никогда не совершу



**49) Что означает сквозное тестирование? (E2E — End–to–End)**
Сквозное тестирование - это стратегия тестирования для выполнения тестов, которые охватывают все возможные потоки приложения от его начала до конца; проверяет программную систему вместе с ее интеграцией с внешними интерфейсами. Целью сквозного тестирования является создание полного производственного сценария, выявление программных зависимостей и утверждение, что между различными программными модулями и подсистемами передается правильный ввод. Сквозное тестирование обычно выполняется после функционального и системного тестирования. Оно использует реальные данные, такие как данные и тестовая среда, для имитации настроек в реальном времени. Сквозное тестирование также называется цепным тестированием (Chain testing). Для чего оно нужно? Современные программные системы являются сложными и взаимосвязаны с несколькими подсистемами. Подсистема может отличаться от текущей системы или может принадлежать другой организации. Если какая-либо из подсистем выйдет из строя, вся система программного обеспечения может рухнуть. Это серьезный риск, и его можно избежать путем сквозного тестирования. 


**50)В чем разница между E2E и системным тестированием?**
      End to End testing
         Проверяет программную систему, а также взаимосвязанные подсистемы
         Проверяет весь E2E flow
         Все интерфейсы, бэкэнд-системы
         Выполняется после завершения System testing
         Сквозное тестирование включает проверку внешних интерфейсов, которые могут быть сложными для автоматизации. Следовательно, ручное тестирование является предпочтительным.
      System testing
        Проверяет только программную систему в соответствии со спецификациями требований.
        Проверяет функциональные возможности и функции системы.
        Функциональное и нефункциональное тестирование 
        Выполняется после завершения Integration testing
        Как ручное, так и автоматическое могут быть выполнены для тестирования системы

**51.Что такое параллельное тестирование? (Parallel testing)**
Это тип тестирования ПО, который одновременно проверяет несколько приложений или подкомпонентов одного приложения, чтобы сократить время выполнения теста. При параллельном тестировании тестировщик запускает две разные версии программного обеспечения одновременно с одним и тем же вводом. Цель состоит в том, чтобы выяснить, ведут ли себя прежняя система и новая система одинаково или по-разному. Это гарантирует, что новая система достаточно способна для эффективной работы программного обеспечения.
  Пример: когда какая-либо организация переходит от старой системы к новой, legacy является важной частью. Передача этих данных является сложным процессом. При тестировании программного обеспечения проверка совместимости вновь разработанной системы со старой системой осуществляется посредством «параллельного тестирования».
     Это Parallel testing
        Тестирование обновленного приложения по сравнению с предыдущим приложением. 
        Запуск старого сценария с новым программным обеспечением с зарезервированными условиями ввода.    
        Цель состоит в том, чтобы узнать, соответствует ли результат предыдущей системе. 
        Должен иметь знания о старой и недавно разработанной системе
    Это НЕ Parallel testing
        Тестирование только одного ПО
        Кросс-браузерное или кроссплатформенное тестирование.
        Цель состоит в том, чтобы выяснить проблему проектирования.
        Знать разницу не обязательно.


   
**52. Чем AdHock тестирование отличается от Исследовательского тестирования?
AdHock (интуитивное тестирование) -это вид тестирования который выполняется без подготовки к тестированию продукта, без определения ожидаемых результатов, проектирования тестовых сценариев. Тоесть тестирование проходит без требований, тестируется обычно как пользователь с валидными данными(происходит позитивное тестирование).
 Exploratory testing (Исследовательского тестирования)- одновременно является и техникой и видом тестирования. Такое тестирование подразумевает под собой, одновременно изучение проекта функционала, проектирование тест кейсов в уме и тут же их исполнение, не записывая и не создавая тестовою документацию. (Тоесть тестирование происходит с требованиями и с применением негативного тестирования)


































































  
